from ._anvil_designer import Form1Template
from anvil import *

class Form1(Form1Template):
  def __init__(self, **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    
    self.currency_map = {}
    self.amounts = [20.0, 10.0, 5.0, 1.0, 0.5, 0.25, 0.1, 0.05, 0.01]

    for amt in self.amounts:
      self.currency_map[amt] = 100

#     self.text_box_price.bor

    self.grid_panel_error.visible = False
    # Coins 
  
    self.label_1c.text = 0
    self.label_5c.text = 0
    self.label_10c.text = 0
    self.label_25c.text = 0
    self.label_50c.text = 0
    
    # Bills
    self.label_1_dol.text = 0
    self.label_5_dol.text = 0
    self.label_10_dol.text = 0
    self.label_20_dol.text = 0
    # Any code you write here will run when the form opens.
    
    self.grid_panel_dollar.visible = False
    self.grid_panel_register.visible = False
    
    self.resetRegister()
    
    
  
  def showErrorMsg(self, msg):
    self.label_error.text = msg
    self.grid_panel_error.visible = True
    
    
  def setRegisFromMap(self):
    
    print("In setRegisFromMap")
    self.lbl_1c_regis.text = self.currency_map[0.01]
    self.lbl_5c_regis.text = self.currency_map[0.05]
    self.lbl_10c_regis.text = self.currency_map[0.1]
    self.lbl_25c_regis.text = self.currency_map[0.25]
    self.lbl_50c_regis.text = self.currency_map[0.50]
    
    print(f"setRegisFromMap map[1.0] = {self.currency_map[1.0]}")
    
    self.label_1_dol_regis.text = self.currency_map[1.0]
    self.label_5_dol_regis.text = self.currency_map[5.0]
    self.label_10_dol_regis.text = self.currency_map[10.0]
    self.label_20_dol_regis.text = self.currency_map[20]
      
      
    
  def resetRegister(self):
        
    for amt in self.amounts:
      self.currency_map[amt] = 20
    
#     self.currency_map[0.1] = 0
      
    self.setRegisFromMap()
    

  def replenishRegister(self, deposit):
        deposit = round(deposit, 2)
      
        print(f"Deposit: {deposit}")
        
        for amount in self.amounts:
          while deposit >= amount:
            
            print(f"In loop deposit: {deposit}")
            print(f"In loop amount: {amount}")
            
            print(f"Num of {amount} before: {self.currency_map[amount]}")
            self.currency_map[amount] += 1
            print(f"Num of {amount} after: {self.currency_map[amount]}")
            
            deposit -= amount
            
            deposit = round(deposit, 2)
          
        self.setRegisFromMap()
  
  
  def makeChange(self, price, payment):
    user_change_map = {}
    
    if payment < 0 or price < 0:
      print("Error! Negative values.")
      self.showErrorMsg("Error! Negative values.")
      return user_change_map
    
    change = (payment - price)
    change = round(change, 2)
    
    self.total_change = change
    
    if change > 0:
#       self.replenishRegister(price)
    
      for amount in self.amounts:
        while change >= amount and self.currency_map[amount] != 0:
            change -= amount
  
            change = round(change, 2)
            self.currency_map[amount] -= 1
  
            user_change_map[amount] = user_change_map.get(amount, 0) + 1
        
      if change > 0:
        print("We're sorry! Due to a nationwide coin/bill shortage we're not able to provide you change.")
        self.showErrorMsg("Sorry no change! Coin/bill shortage.")
      else:
        print("Calling setRegis in makeChange else")
        self.setRegisFromMap()
        self.replenishRegister(price)
        
    elif change < 0:
      print("Error! Payment not Sufficient.")
      self.showErrorMsg("Error! Payment not Sufficient.")
    
    elif change == 0:
      self.replenishRegister(price)
      print("No change! Have a great day.")
      self.showErrorMsg("No change! Have a great day.")
    
    
    return user_change_map


  def populateChangeUI(self, user_change_map):
    
    # Coins 
    self.label_1c.text = user_change_map.get(.01,0)
    self.label_5c.text = user_change_map.get(.05,0)
    self.label_10c.text = user_change_map.get(.1,0)
    self.label_25c.text = user_change_map.get(.25,0)
    self.label_50c.text = user_change_map.get(.50, 0)
    
    # Bills
    self.label_1_dol.text = user_change_map.get(1, 0)
    self.label_5_dol.text = user_change_map.get(5, 0)
    self.label_10_dol.text = user_change_map.get(10, 0)
    self.label_20_dol.text = user_change_map.get(20, 0)
    
#     self.total_change_lbl.text = "$" + str(round(self.total_change_lbl.text, 2))
    
    self.grid_panel_dollar.visible = True
    
    
  def button_1_click(self, **event_args):
    """This method is called when the button is clicked"""
    
    print("Here btn 1")
    
#     self.resetRegister()
    
    if self.text_box_payment.text and self.text_box_price.text:
      
      try:
        
        price = float(self.text_box_price.text)
        payment = float(self.text_box_payment.text)
        
        if price < 0 or payment < 0:
          print("Error! Negative values.")
          self.showErrorMsg("Error! Negative values.")
        else:
          
          user_change_map = self.makeChange(price, payment)
        
          self.populateChangeUI(user_change_map)
          
#           if self.grid_panel_error.visible:
#             self.grid_panel_error.visible = False
        
      except ValueError:
        print("Error! Please make sure all values are numeric.")
        self.showErrorMsg("Error! Please make sure all values are numeric.")
     
    elif not self.text_box_payment.text and not self.text_box_price.text:
      print("Please enter in a price and payment amount.")
      self.showErrorMsg("Please enter in a price and payment amount.")
      
    elif not self.text_box_price.text:
      print("Please enter in a price.")
      self.showErrorMsg("Please enter in a price.")
      
    else:
      print("Please enter in a payment amount.")
      self.showErrorMsg("Please enter in a payment amount.")
      

#   def button_2_click(self, **event_args):
#     """This method is called when the button is clicked"""
#     print(f"In button 2! Resetting register")
    
#     self.resetRegister()
    

  def button_close_error_click(self, **event_args):
    """This method is called when the button is clicked"""
    self.grid_panel_error.visible = False

  def show_register_btn_click(self, **event_args):
    """This method is called when the button is clicked"""
    
    if self.grid_panel_error.visible:
            self.grid_panel_error.visible = False
    
    if not self.grid_panel_register.visible:
      self.grid_panel_register.visible = True
      self.show_register_btn.text = "Hide Register"
    else:
      self.grid_panel_register.visible = False
      self.show_register_btn.text = "Show Register"
    
    

  def reset_register_btn_click(self, **event_args):
    """This method is called when the button is clicked"""
    if self.grid_panel_error.visible:
            self.grid_panel_error.visible = False
        
    self.resetRegister()

  def update_register_btn_click(self, **event_args):
    """This method is called when the button is clicked"""
    try:
      if float(self.lbl_1c_regis.text) < 0 \
        or float(self.lbl_5c_regis.text) < 0 \
        or float(self.lbl_10c_regis.text) < 0 \
        or float(self.lbl_25c_regis.text) < 0 \
        or float(self.lbl_50c_regis.text) < 0 \
        or float(self.label_1_dol_regis.text) < 0 \
        or float(self.label_5_dol_regis.text) < 0 \
        or float(self.label_10_dol_regis.text) < 0 \
        or float(self.label_20_dol_regis.text) < 0:
          self.showErrorMsg("Error! Please ensure entered register balances are positive.")
        
      self.currency_map[0.01] = float(self.lbl_1c_regis.text)
      self.currency_map[0.05] = float(self.lbl_5c_regis.text)
      self.currency_map[0.1] = float(self.lbl_10c_regis.text)
      self.currency_map[0.25] = float(self.lbl_25c_regis.text)
      self.currency_map[0.50] = float(self.lbl_50c_regis.text)
      
      self.currency_map[1.0] = float(self.label_1_dol_regis.text)
      self.currency_map[5.0] = float(self.label_5_dol_regis.text)
      self.currency_map[10.0] = float(self.label_10_dol_regis.text)
      self.currency_map[20.0] = float(self.label_20_dol_regis.text)
      
      print("Register updated")
      print("In update_register, register map after update:")
      print(str(self.currency_map))
    except:
      self.showErrorMsg("Error! Please ensure entered register balances are numeric.")










  