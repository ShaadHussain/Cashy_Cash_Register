from ._anvil_designer import Form1Template
from anvil import *

class Form1(Form1Template):
  def __init__(self, **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    
    self.currency_map = {}
    self.amounts = [20.0, 10.0, 5.0, 1.0, 0.5, 0.25, 0.1, 0.05, 0.01]

    for amt in self.amounts:
      self.currency_map[amt] = 100
    

    self.label_1c.text = self.currency_map[0.01]
    # Any code you write here will run when the form opens.
    
    
  def resetRegister(self):
    
    # Coins 
    self.label_1c.text = 100
    self.label_5c.text = 100
    self.label_10c.text = 100
    self.label_25c.text = 100
    self.label_50c.text = 100
    
    # Bills
    self.label_1_dol.text = 100
    self.label_5_dol.text = 100
    self.label_10_dol.text = 100
    self.label_20_dol.text = 100
    
    
    
    
  
  
  def replenishRegister(self, deposit, register_map):
        deposit = round(deposit, 2)
        
        for amt in self.amounts:
          while deposit >= amount:
            self.currency_map[amount] += 1
            deposit -= amt
            
            deposit = round(deposit, 2)
  
  
  def makeChange(self, price, payment):
    user_change_map = {}
    
    change = (payment - price)
    change = round(change, 2)
    
    if change > 0:
      replenishRegister(price, register_map)
    
      for amount in self.amounts:
        while change >= amount and currency_map[amount] != 0:
            change -= amount
  
            change = round(change, 2)
            self.currency_map[amount] -= 1
  
            user_change_map[amount] = user_change_map.get(amount, 0) + 1
        
        if change > 0:
          print("We're sorry! Due to a nationwide coin/bill shortage we're not able to provide you change.")
    elif change < 0:
      print("Error! Payment not Sufficient.")
    
    else:
      print("No change! Have a great day.")
    
    return user_change_map



  def populateChangeUI(self, user_change_map):
    
    # Coins 
    self.label_1c = user_change_map[.01]
    self.label_5c = user_change_map[.05]
    self.label_10c = user_change_map[.1]
    self.label_25c = user_change_map[.25]
    self.label_50c = user_change_map[.5]
    
    # Bills
    self.label_1_dol = user_change_map[1]
    self.label_5_dol = user_change_map[5]
    self.label_10_dol = user_change_map[10]
    self.label_20_dol = user_change_map[20]
      
      

    
    
  def button_1_click(self, **event_args):
    """This method is called when the button is clicked"""
    
    print("Here btn 1")
    
    self.resetRegister()
    
    if self.text_box_payment.text and self.text_box_price.text:
      
      price = float(self.text_box_price.text)
      payment = float(self.text_box_payment.text)
      
      user_change_map = self.makeChange(price, payment)
      
      self.populateChangeUI(user_change_map)
    elif not self.text_box_payment.text:
      print("Please enter in a payment amount.")
    elif not self.text_box_price.text:
      print("Please enter in a price.")
    else:
      print("Please enter in a price and payment amount.")
      
      
      

      

    
    

  def button_2_click(self, **event_args):
    """This method is called when the button is clicked"""
    print(f"In button 2!")





  