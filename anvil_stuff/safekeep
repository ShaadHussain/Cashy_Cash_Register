from ._anvil_designer import Form1Template
from anvil import *

class Form1(Form1Template):
  def __init__(self, **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    
    self.currency_map = {}
    self.amounts = [20.0, 10.0, 5.0, 1.0, 0.5, 0.25, 0.1, 0.05, 0.01]

    for amt in self.amounts:
      self.currency_map[amt] = 100


    self.grid_panel_error.visible = False
    # Coins 
  
    self.label_1c.text = 0
    self.label_5c.text = 0
    self.label_10c.text = 0
    self.label_25c.text = 0
    self.label_50c.text = 0
    
    # Bills
    self.label_1_dol.text = 0
    self.label_5_dol.text = 0
    self.label_10_dol.text = 0
    self.label_20_dol.text = 0
    # Any code you write here will run when the form opens.
    
  
  def showErrorMsg(self, msg):
    self.label_error.text = msg
    self.grid_panel_error.visible = True
    
  def resetRegister(self):
        
    for amt in self.amounts:
      self.currency_map[amt] = 100

    
    
  def replenishRegister(self, deposit):
        deposit = round(deposit, 2)
        
        for amount in self.amounts:
          while deposit >= amount:
            self.currency_map[amount] += 1
            deposit -= amount
            
            deposit = round(deposit, 2)
  
  
  def makeChange(self, price, payment):
    user_change_map = {}
    
    change = (payment - price)
    change = round(change, 2)
    
    self.total_change = change
    
    if change > 0:
      self.replenishRegister(price)
    
      for amount in self.amounts:
        while change >= amount and self.currency_map[amount] != 0:
            change -= amount
  
            change = round(change, 2)
            self.currency_map[amount] -= 1
  
            user_change_map[amount] = user_change_map.get(amount, 0) + 1
        
      if change > 0:
        print("We're sorry! Due to a nationwide coin/bill shortage we're not able to provide you change.")
        
        self.showErrorMsg("Sorry no change! Coin/bill shortage.")
    elif change < 0:
      print("Error! Payment not Sufficient.")
      self.showErrorMsg("Error! Payment not Sufficient.")
      
    
    else:
      print("No change! Have a great day.")
      self.showErrorMsg("No change! Have a great day.")
      
    
    return user_change_map



  def populateChangeUI(self, user_change_map):
    
    # Coins 
    self.label_1c.text = user_change_map.get(.01,0)
    self.label_5c.text = user_change_map.get(.05,0)
    self.label_10c.text = user_change_map.get(.1,0)
    self.label_25c.text = user_change_map.get(.25,0)
    self.label_50c.text = user_change_map.get(.50, 0)
    
    # Bills
    self.label_1_dol.text = user_change_map.get(1, 0)
    self.label_5_dol.text = user_change_map.get(5, 0)
    self.label_10_dol.text = user_change_map.get(10, 0)
    self.label_20_dol.text = user_change_map.get(20, 0)
    
    self.total_change_lbl.text = self.total_change
    
      

    
    
  def button_1_click(self, **event_args):
    """This method is called when the button is clicked"""
    
    print("Here btn 1")
    
    self.resetRegister()
    
    if self.text_box_payment.text and self.text_box_price.text:
      
      price = float(self.text_box_price.text)
      payment = float(self.text_box_payment.text)
      
      user_change_map = self.makeChange(price, payment)
      
      self.populateChangeUI(user_change_map)
      
    elif not self.text_box_payment.text and not self.text_box_price.text:
      print("Please enter in a price and payment amount.")
      self.showErrorMsg("Please enter in a price and payment amount.")
    elif not self.text_box_price.text:
      print("Please enter in a price.")
      self.showErrorMsg("Please enter in a price.")
      
    else:
      print("Please enter in a payment amount.")
      self.showErrorMsg("Please enter in a payment amount.")
      
      
      
      

  def button_2_click(self, **event_args):
    """This method is called when the button is clicked"""
    print(f"In button 2! Resetting register")
    
    self.resetRegister()
    

  def button_close_error_click(self, **event_args):
    """This method is called when the button is clicked"""
    self.grid_panel_error.visible = False






  